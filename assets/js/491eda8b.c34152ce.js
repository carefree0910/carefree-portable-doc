"use strict";(self.webpackChunkcarefree_portable_doc=self.webpackChunkcarefree_portable_doc||[]).push([[146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||l;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6873:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);function r(e){let{type:t,defaultValue:n,required:r,appendix:l}=e;const o=a.createElement(a.Fragment,null,l&&a.createElement(a.Fragment,null," ","- ",a.createElement("code",null,l)));return a.createElement("p",null,"[ ",a.createElement("strong",null,t),r?a.createElement(a.Fragment,null,a.createElement("em",null,", required"),o):n?a.createElement(a.Fragment,null,a.createElement("em",null,", default"),": ",a.createElement("code",null,n),o):""," ","]")}},7791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(7462),r=n(7294),l=n(3905),o=n(6873);const i={id:"config",title:"Config"},s=void 0,c={unversionedId:"api-reference/config",id:"api-reference/config",title:"Config",description:"* Configurations",source:"@site/docs/api-reference/config.md",sourceDirName:"api-reference",slug:"/api-reference/config",permalink:"/carefree-portable-doc/docs/api-reference/config",draft:!1,tags:[],version:"current",lastUpdatedAt:1703239742,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{id:"config",title:"Config"},sidebar:"docs",previous:{title:"Code of Conduct",permalink:"/carefree-portable-doc/docs/contributing-guides/code-of-conduct"},next:{title:"Dataclasses",permalink:"/carefree-portable-doc/docs/api-reference/dataclasses"}},p={},d=[{value:"<code>workspace</code>",id:"workspace",level:3},{value:"<code>allow_existing</code>",id:"allow_existing",level:3},{value:"<code>assets</code>",id:"assets",level:3},{value:"<code>downloads</code>",id:"downloads",level:3},{value:"<code>python_requirements</code>",id:"python_requirements",level:3},{value:"<code>huggingface_space_app_file</code>",id:"huggingface_space_app_file",level:3},{value:"<code>python_launch_cli</code>",id:"python_launch_cli",level:3},{value:"<code>python_launch_entry</code>",id:"python_launch_entry",level:3},{value:"<code>external_blocks</code>",id:"external_blocks",level:3}],u={toc:d},f="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(f,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{title:"User Guide",type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/user-guides/configurations"},"Configurations")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"carefree-portable")," \ud83d\udce6\ufe0f is designed to hold configurations in one single class - the ",(0,l.kt)("inlineCode",{parentName:"p"},"IConfig")," class."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfport/config.py"',title:'"cfport/config.py"'},"@dataclass\nclass IConfig:\n    workspace: str = DEFAULT_WORKSPACE\n    allow_existing: bool = True\n    assets: Optional[List[TAsset]] = None\n    downloads: Dict[str, Union[str, List[str]]] = field(default_factory=dict)\n    python_requirements: List[Union[str, PyRequirement]] = field(default_factory=list)\n    huggingface_space_app_file: Optional[str] = None\n    python_launch_cli: Optional[str] = None\n    python_launch_entry: Optional[str] = None\n    external_blocks: Optional[List[str]] = None\n    version: Optional[str] = None\n")),(0,l.kt)("p",null,"This class is not intended to be instantiated directly, it should be generated internally from the configuration JSON files (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"cfport.json"),"). You may find that contents in this page are almost the same as the ",(0,l.kt)("a",{parentName:"p",href:"/docs/user-guides/configurations"},"User Guide"),"."),(0,l.kt)("h3",{id:"workspace"},(0,l.kt)("inlineCode",{parentName:"h3"},"workspace")),(0,l.kt)(o.Z,{type:"str",defaultValue:'"cfport_package"',mdxType:"Badget"}),(0,l.kt)("p",null,"The workspace path, this is where your portable package will be stored."),(0,l.kt)("h3",{id:"allow_existing"},(0,l.kt)("inlineCode",{parentName:"h3"},"allow_existing")),(0,l.kt)(o.Z,{type:"bool",defaultValue:"True",mdxType:"Badget"}),(0,l.kt)("p",null,"Indicates whether to allow existing workspace. This is useful when the package process crashes and you want to restart it with caches."),(0,l.kt)("h3",{id:"assets"},(0,l.kt)("inlineCode",{parentName:"h3"},"assets")),(0,l.kt)(o.Z,{type:(0,l.kt)(r.Fragment,null,"List[str | dict | ",(0,l.kt)("a",{href:"/carefree-portable-doc/docs/api-reference/dataclasses#asset"},"Asset"),"] | None"),defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The list of assets to fetch."),(0,l.kt)("p",null,"If it is not ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),", the items in the list will be converted into ",(0,l.kt)("a",{parentName:"p",href:"/docs/api-reference/dataclasses#asset"},"Asset")," objects for further processing:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"Asset(path=asset)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dict")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"Asset(**asset)"),".")),(0,l.kt)("h3",{id:"downloads"},(0,l.kt)("inlineCode",{parentName:"h3"},"downloads")),(0,l.kt)("admonition",{title:"Reference",type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/reference/jsons#downloads"},"JSONs - downloads")))),(0,l.kt)(o.Z,{type:"Dict[str, str | List[str]]",defaultValue:"{}",mdxType:"Badget"}),(0,l.kt)("p",null,"The dictionary of download configurations."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The key should be one of the files' names in the ",(0,l.kt)("inlineCode",{parentName:"li"},"cfport/settings/downloads")," folder."),(0,l.kt)("li",{parentName:"ul"},"The value should be one of the keys in the corresponding ",(0,l.kt)("inlineCode",{parentName:"li"},"json")," file.")),(0,l.kt)("p",null,"Here's an example, which indicates we will download the file associated with the ",(0,l.kt)("inlineCode",{parentName:"p"},"3.10.11_64-bit")," key in the ",(0,l.kt)("inlineCode",{parentName:"p"},"python_embeddables.json")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "python_embeddables": "3.10.11_64-bit"\n}\n')),(0,l.kt)("p",null,"And here's the pseudo code of how we process it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfport/executer/blocks/download.py"',title:'"cfport/executer/blocks/download.py"'},'for k, vs in downloads.items():\n    if isinstance(vs, str):\n        vs = [vs]\n    k_urls_path = SETTINGS_DIR / "downloads" / f"{k}.json"\n    with k_urls_path.open("r") as f:\n        k_urls = json.load(f)\n    for v in vs:\n        v_url = k_urls.get(v)\n        if isinstance(v_url, dict):\n            v_url = v_url.get(platform)\n        download(v_url)\n')),(0,l.kt)("h3",{id:"python_requirements"},(0,l.kt)("inlineCode",{parentName:"h3"},"python_requirements")),(0,l.kt)(o.Z,{type:(0,l.kt)(r.Fragment,null,"List[str | dict | ",(0,l.kt)("a",{href:"/carefree-portable-doc/docs/api-reference/dataclasses#pyrequirement"},"PyRequirement"),"]"),defaultValue:"[]",mdxType:"Badget"}),(0,l.kt)("p",null,"The list of Python requirements."),(0,l.kt)("p",null,"The items in the list will be converted into ",(0,l.kt)("a",{parentName:"p",href:"/docs/api-reference/dataclasses#pyrequirement"},"PyRequirement")," objects for further processing:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"PyRequirement(package_name=req)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dict")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"PyRequirement(**req)"),".")),(0,l.kt)("h3",{id:"huggingface_space_app_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"huggingface_space_app_file")),(0,l.kt)(o.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The Hugging Face space app file, if any."),(0,l.kt)("h3",{id:"python_launch_cli"},(0,l.kt)("inlineCode",{parentName:"h3"},"python_launch_cli")),(0,l.kt)(o.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The Python launch CLI file. It should relative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"site-packages")," directory."),(0,l.kt)("h3",{id:"python_launch_entry"},(0,l.kt)("inlineCode",{parentName:"h3"},"python_launch_entry")),(0,l.kt)(o.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The Python launch entry file. It should relative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"workspace"),"."),(0,l.kt)("h3",{id:"external_blocks"},(0,l.kt)("inlineCode",{parentName:"h3"},"external_blocks")),(0,l.kt)(o.Z,{type:"List[str] | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The list of external blocks, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/design-philosophy#block"},(0,l.kt)("inlineCode",{parentName:"a"},"Block"))," for more details."))}m.isMDXComponent=!0}}]);