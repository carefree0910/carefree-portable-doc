"use strict";(self.webpackChunkcarefree_portable_doc=self.webpackChunkcarefree_portable_doc||[]).push([[321],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),f=l,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6873:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294);function l(e){let{type:t,defaultValue:n,required:l,appendix:r}=e;const i=a.createElement(a.Fragment,null,r&&a.createElement(a.Fragment,null," ","- ",a.createElement("code",null,r)));return a.createElement("p",null,"[ ",a.createElement("strong",null,t),l?a.createElement(a.Fragment,null,a.createElement("em",null,", required"),i):n?a.createElement(a.Fragment,null,a.createElement("em",null,", default"),": ",a.createElement("code",null,n),i):""," ","]")}},3730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),l=(n(7294),n(3905)),r=n(6873);const i={id:"configurations",title:"Configurations"},o=void 0,s={unversionedId:"user-guides/configurations",id:"user-guides/configurations",title:"Configurations",description:"* Config",source:"@site/docs/user-guides/configurations.md",sourceDirName:"user-guides",slug:"/user-guides/configurations",permalink:"/carefree-portable-doc/docs/user-guides/configurations",draft:!1,tags:[],version:"current",lastUpdatedAt:1704246143,formattedLastUpdatedAt:"Jan 3, 2024",frontMatter:{id:"configurations",title:"Configurations"},sidebar:"docs",previous:{title:"CLI",permalink:"/carefree-portable-doc/docs/user-guides/cli"},next:{title:"Contributing",permalink:"/carefree-portable-doc/docs/contributing-guides/contributing"}},p={},c=[{value:"<code>workspace</code>",id:"workspace",level:3},{value:"<code>allow_existing</code>",id:"allow_existing",level:3},{value:"<code>assets</code>",id:"assets",level:3},{value:"<code>downloads</code>",id:"downloads",level:3},{value:"<code>python_requirements</code>",id:"python_requirements",level:3},{value:"<code>huggingface_space_app_file</code>",id:"huggingface_space_app_file",level:3},{value:"<code>python_launch_cli</code>",id:"python_launch_cli",level:3},{value:"<code>python_launch_entry</code>",id:"python_launch_entry",level:3},{value:"<code>external_blocks</code>",id:"external_blocks",level:3}],d={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{title:"API Reference",type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api-reference/Config"},"Config")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api-reference/Dataclasses"},"Dataclasses")))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"carefree-portable")," \ud83d\udce6\ufe0f is designed to hold configurations in one single file - the ",(0,l.kt)("inlineCode",{parentName:"p"},"cfport.json")," file. This file has an identical structure with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/api-reference/Config"},(0,l.kt)("inlineCode",{parentName:"a"},"Config"))," class, so you may find that contents in this page are almost the same as the ",(0,l.kt)("a",{parentName:"p",href:"/docs/api-reference/Config"},"API Reference"),"."),(0,l.kt)("p",null,"Typical ",(0,l.kt)("inlineCode",{parentName:"p"},"cfpot.json")," file looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "auto",\n  "info": {\n    "workspace": "carefree-portable",\n    "allow_existing": true,\n    "assets": null,\n    "downloads": {\n      "python_embeddables": "3.10.11_64-bit"\n    },\n    "python_requirements": [\n      {\n        "install_command": "$pip install ."\n      }\n    ],\n    "python_launch_cli": "cfport/cli.py",\n    "external_blocks": null\n  }\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," field indicates the target OS platform."),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"info")," field contains all the configurations we need to build a portable package.")),(0,l.kt)("p",null,"Below are the detail descriptions of each field in ",(0,l.kt)("inlineCode",{parentName:"p"},"info"),"."),(0,l.kt)("h3",{id:"workspace"},(0,l.kt)("inlineCode",{parentName:"h3"},"workspace")),(0,l.kt)(r.Z,{type:"str",defaultValue:'"cfport_package"',mdxType:"Badget"}),(0,l.kt)("p",null,"The workspace path, this is where your portable package will be stored."),(0,l.kt)("h3",{id:"allow_existing"},(0,l.kt)("inlineCode",{parentName:"h3"},"allow_existing")),(0,l.kt)(r.Z,{type:"bool",defaultValue:"True",mdxType:"Badget"}),(0,l.kt)("p",null,"Indicates whether to allow existing workspace. This is useful when the package process crashes and you want to restart it with caches."),(0,l.kt)("h3",{id:"assets"},(0,l.kt)("inlineCode",{parentName:"h3"},"assets")),(0,l.kt)(r.Z,{type:"List[str | dict] | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The list of assets to fetch."),(0,l.kt)("p",null,"If it is not ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),", the items in the list will be converted into ",(0,l.kt)("a",{parentName:"p",href:"/docs/api-reference/dataclasses#asset"},"Asset")," objects for further processing:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"Asset(path=asset)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dict")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"Asset(**asset)"),".")),(0,l.kt)("h3",{id:"downloads"},(0,l.kt)("inlineCode",{parentName:"h3"},"downloads")),(0,l.kt)("admonition",{title:"Reference",type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/reference/jsons#downloads"},"JSONs - downloads")))),(0,l.kt)(r.Z,{type:"Dict[str, str | List[str]]",defaultValue:"{}",mdxType:"Badget"}),(0,l.kt)("p",null,"The dictionary of download configurations."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The key should be one of the files' names in the ",(0,l.kt)("inlineCode",{parentName:"li"},"cfport/settings/downloads")," folder."),(0,l.kt)("li",{parentName:"ul"},"The value should be one of the keys in the corresponding ",(0,l.kt)("inlineCode",{parentName:"li"},"json")," file.")),(0,l.kt)("p",null,"Here's an example, which indicates we will download the file associated with the ",(0,l.kt)("inlineCode",{parentName:"p"},"3.10.11_64-bit")," key in the ",(0,l.kt)("inlineCode",{parentName:"p"},"python_embeddables.json")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "python_embeddables": "3.10.11_64-bit"\n}\n')),(0,l.kt)("p",null,"And here's the pseudo code of how we process it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfport/executer/blocks/download.py"',title:'"cfport/executer/blocks/download.py"'},'for k, vs in downloads.items():\n    if isinstance(vs, str):\n        vs = [vs]\n    k_urls_path = SETTINGS_DIR / "downloads" / f"{k}.json"\n    with k_urls_path.open("r") as f:\n        k_urls = json.load(f)\n    for v in vs:\n        v_url = k_urls.get(v)\n        if isinstance(v_url, dict):\n            v_url = v_url.get(platform)\n        download(v_url)\n')),(0,l.kt)("h3",{id:"python_requirements"},(0,l.kt)("inlineCode",{parentName:"h3"},"python_requirements")),(0,l.kt)(r.Z,{type:"List[str | dict]",defaultValue:"[]",mdxType:"Badget"}),(0,l.kt)("p",null,"The list of Python requirements."),(0,l.kt)("p",null,"The items in the list will be converted into ",(0,l.kt)("a",{parentName:"p",href:"/docs/api-reference/dataclasses#pyrequirement"},"PyRequirement")," objects for further processing:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"PyRequirement(package_name=req)"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dict")," will be converted into ",(0,l.kt)("inlineCode",{parentName:"li"},"PyRequirement(**req)"),".")),(0,l.kt)("h3",{id:"huggingface_space_app_file"},(0,l.kt)("inlineCode",{parentName:"h3"},"huggingface_space_app_file")),(0,l.kt)(r.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The Hugging Face space app file, if any."),(0,l.kt)("h3",{id:"python_launch_cli"},(0,l.kt)("inlineCode",{parentName:"h3"},"python_launch_cli")),(0,l.kt)(r.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The Python launch CLI file. It should relative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"site-packages")," directory."),(0,l.kt)("h3",{id:"python_launch_entry"},(0,l.kt)("inlineCode",{parentName:"h3"},"python_launch_entry")),(0,l.kt)(r.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The Python launch entry file. It should relative to the ",(0,l.kt)("inlineCode",{parentName:"p"},"workspace"),"."),(0,l.kt)("h3",{id:"external_blocks"},(0,l.kt)("inlineCode",{parentName:"h3"},"external_blocks")),(0,l.kt)(r.Z,{type:"List[str] | None",defaultValue:"None",mdxType:"Badget"}),(0,l.kt)("p",null,"The list of external blocks, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/design-philosophy#block"},(0,l.kt)("inlineCode",{parentName:"a"},"Block"))," for more details."))}f.isMDXComponent=!0}}]);