"use strict";(self.webpackChunkcarefree_portable_doc=self.webpackChunkcarefree_portable_doc||[]).push([[311],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={id:"jsons",title:"JSONs"},r=void 0,s={unversionedId:"reference/jsons",id:"reference/jsons",title:"JSONs",description:"JSONs are important components of carefree-portable \ud83d\udce6\ufe0f, because packaging is more of an asset-heavy task instead of a logic-heavy task.",source:"@site/docs/reference/jsons.md",sourceDirName:"reference",slug:"/reference/jsons",permalink:"/carefree-portable-doc/docs/reference/jsons",draft:!1,tags:[],version:"current",lastUpdatedAt:1703239565,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{id:"jsons",title:"JSONs"},sidebar:"docs",previous:{title:"Terminology",permalink:"/carefree-portable-doc/docs/reference/terminology"},next:{title:"Roadmap",permalink:"/carefree-portable-doc/docs/about/roadmap"}},l={},p=[{value:"<code>downloads</code>",id:"downloads",level:2},{value:"Contributing",id:"contributing",level:3},{value:"<code>presets</code>",id:"presets",level:2},{value:"Contributing",id:"contributing-1",level:3},{value:"<code>defaults.json</code>",id:"defaultsjson",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"JSONs are important components of ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-portable")," \ud83d\udce6\ufe0f, because packaging is more of an asset-heavy task instead of a logic-heavy task."),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON")," files are contained in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cfport/settings")," directory, whose structure is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"cfport\n\u251c\u2500 settings\n\u251c\u2500\u2500 downloads\n\u251c\u2500\u2500\u2500\u2500 xxx.json\n\u251c\u2500\u2500\u2500\u2500 ...\n\u251c\u2500\u2500 presets\n\u251c\u2500\u2500\u2500\u2500 xxx.json\n\u251c\u2500\u2500\u2500\u2500 ...\n\u2514\u2500\u2500 defaults.json\n")),(0,a.kt)("p",null,"We will dive into the subfolders & the ",(0,a.kt)("inlineCode",{parentName:"p"},"defaults.json")," file in the following sections."),(0,a.kt)("h2",{id:"downloads"},(0,a.kt)("inlineCode",{parentName:"h2"},"downloads")),(0,a.kt)("p",null,"This folder contains the download URLs of some assets. For example, there's a ",(0,a.kt)("inlineCode",{parentName:"p"},"python_embeddables.json")," in this folder, which contains the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="cfport/settings/downloads/python_embeddables.json"',title:'"cfport/settings/downloads/python_embeddables.json"'},'{\n  "3.10.11_32-bit": {\n    # highlight-next-line\n    "windows": "https://www.python.org/ftp/python/3.10.11/python-3.10.11-embed-win32.zip"\n  },\n  "3.10.11_64-bit": {\n    # highlight-next-line\n    "windows": "https://www.python.org/ftp/python/3.10.11/python-3.10.11-embed-amd64.zip"\n  },\n  ...\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Notice that the highlighted ",(0,a.kt)("inlineCode",{parentName:"p"},"windows")," key is optional. If your asset is platform-independent, you can omit this key:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="cfport/settings/downloads/python_embeddables.json"',title:'"cfport/settings/downloads/python_embeddables.json"'},'{\n  "3.10.11_32-bit": "https://www.python.org/ftp/python/3.10.11/python-3.10.11-embed-win32.zip",\n  "3.10.11_64-bit": "https://www.python.org/ftp/python/3.10.11/python-3.10.11-embed-amd64.zip",\n  ...\n}\n'))),(0,a.kt)("p",null,"And we can download the corresponding assets by specifying the ",(0,a.kt)("inlineCode",{parentName:"p"},"downloads")," field in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/user-guides/configurations#downloads"},"configuration")," file. A typical example is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "auto",\n  "info": {\n    # highlight-start\n    "downloads": {\n      "python_embeddables": "3.10.11_64-bit"\n    },\n    # highlight-end\n    ...\n  }\n}\n')),(0,a.kt)("p",null,"The downloaded assets will be placed in the root directory of the workspace (let's say it's ",(0,a.kt)("inlineCode",{parentName:"p"},"cfport_package"),"), and the structure will be as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"cfport_package\n\u251c\u2500 python_embeddables\n\u251c\u2500\u2500\u2500 python-3.10.11-embed-amd64\n\u251c\u2500\u2500\u2500\u2500\u2500 ...\n\u2514\u2500 ...\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},".zip")," file will be automatically extracted, as shown above.")),(0,a.kt)("h3",{id:"contributing"},"Contributing"),(0,a.kt)("p",null,"So, if you want to distribute your assets and allow other ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-portable")," \ud83d\udce6\ufe0f users to download them, you can simply add a ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file in this folder and tell them the ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file name and the key / tag you want them to use."),(0,a.kt)("p",null,"For example, you have some fancy ",(0,a.kt)("strong",{parentName:"p"},"Stable Diffusion")," models that you want to distribute, you can add an ",(0,a.kt)("inlineCode",{parentName:"p"},"sd.json")," file in this folder, which might contain the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="cfport/settings/downloads/sd.json"',title:'"cfport/settings/downloads/sd.json"'},'{\n  "fancy_sd_model_0": "https://url/to/fancy_sd_model_0.pth",\n  "fancy_sd_model_1": "https://url/to/fancy_sd_model_1.pth",\n  ...\n}\n')),(0,a.kt)("p",null,"And then users can download them by:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "auto",\n  "info": {\n    # highlight-start\n    "downloads": {\n      "sd": ["fancy_sd_model_0", "fancy_sd_model_1"]\n    },\n    # highlight-end\n    ...\n  }\n}\n')),(0,a.kt)("p",null,"Notice that we specified a list of tag above, which can be used to download multiple assets associated with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file. In this case, the structure after downloading will be as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"cfport_package\n\u251c\u2500 sd\n\u251c\u2500\u2500\u2500 fancy_sd_model_0.pth\n\u251c\u2500\u2500\u2500 fancy_sd_model_1.pth\n\u2514\u2500 ...\n")),(0,a.kt)("h2",{id:"presets"},(0,a.kt)("inlineCode",{parentName:"h2"},"presets")),(0,a.kt)("admonition",{title:"User Guide",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/user-guides/configurations#python_requirements"},"Configuration - python_requirements")))),(0,a.kt)("p",null,"This folder contains the presets of some configurations, they serve as the 'increment' configuration of the ",(0,a.kt)("a",{parentName:"p",href:"#defaultsjson"},(0,a.kt)("inlineCode",{parentName:"a"},"defaults.json"))," file."),(0,a.kt)("p",null,"A nice example is the ",(0,a.kt)("inlineCode",{parentName:"p"},"torch-2.1.0-cu118.json"),", which can generate a portable ",(0,a.kt)("inlineCode",{parentName:"p"},"pytorch")," Python environment with ",(0,a.kt)("inlineCode",{parentName:"p"},"CUDA")," enabled:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="cfport/settings/presets/torch-2.1.0-cu118.json"',title:'"cfport/settings/presets/torch-2.1.0-cu118.json"'},'{\n  "python_requirements": [\n    {\n      # highlight-next-line\n      "install_command": "$pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118"\n    }\n  ]\n}\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Notice that the highlighted line is using ",(0,a.kt)("inlineCode",{parentName:"p"},"$pip")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"pip"),". This is important because it tells ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-portable")," \ud83d\udce6\ufe0f to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"pip")," executable in the ",(0,a.kt)("inlineCode",{parentName:"p"},"python_embeddables")," folder, instead of the ",(0,a.kt)("inlineCode",{parentName:"p"},"pip")," executable in the system path."),(0,a.kt)("p",{parentName:"admonition"},"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/terminology#keywords"},"Keywords")," for more details.")),(0,a.kt)("h3",{id:"contributing-1"},"Contributing"),(0,a.kt)("p",null,"So, if you want to distribute your favored Python environment, you can simply add a ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file in this folder and tell them the ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file name. For example, you may find ",(0,a.kt)("inlineCode",{parentName:"p"},"diffusers")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"transformers")," are very useful, so you can add a ",(0,a.kt)("inlineCode",{parentName:"p"},"huggingface.json")," file in this folder, which might contain the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="cfport/settings/presets/huggingface.json"',title:'"cfport/settings/presets/huggingface.json"'},'{\n  "python_requirements": [\n    {\n      "install_command": "$pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118"\n    },\n    "diffusers",\n    "transformers"\n  ]\n}\n')),(0,a.kt)("p",null,"And then user can execute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cfport config --preset huggingface\n")),(0,a.kt)("p",null,"to obtain the full configuration, which should be like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "auto",\n  "info": {\n    # highlight-start\n    "python_requirements": [\n      {\n        "install_command": "$pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu118"\n      },\n      "diffusers",\n      "transformers"\n    ],\n    # highlight-end\n    ...\n  }\n}\n')),(0,a.kt)("h2",{id:"defaultsjson"},(0,a.kt)("inlineCode",{parentName:"h2"},"defaults.json")),(0,a.kt)("p",null,"This file contains the default configurations of ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-portable")," \ud83d\udce6\ufe0f. It is fairly simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="cfport/settings/defaults.json"',title:'"cfport/settings/defaults.json"'},'{\n  "downloads": {\n    "python_embeddables": "3.10.11_64-bit"\n  },\n  "python_requirements": []\n}\n')),(0,a.kt)("p",null,"This means we'll only download a ",(0,a.kt)("inlineCode",{parentName:"p"},"python_embeddable")," without any extra python packages."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In most cases, this should be left as-is to make minimal assumptions about the users' needs.")))}m.isMDXComponent=!0}}]);